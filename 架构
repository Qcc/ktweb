客户案例
-客户案例首页 banner推荐案例  列表
  -客户案例详情  首图 标题  内容

-产品

-解决方案

-产品社区

-代理商订货管理 发证

-用户取消授权 解绑

代码生成器
composer require "summerblue/generator:~0.5" --dev
扩展可以生成代码骨架 并执行数据迁移
unsigned() —— 设置不需要标识符（unsigned）
default() —— 为字段添加默认值。
nullable() —— 可为空
使用
php artisan make:scaffold Topic --schema="title:string:index,body:text,user_id:integer:unsigned:index,category_id:integer:unsigned:index,reply_count:integer:unsigned:default(0),view_count:integer:unsigned:default(0),last_reply_user_id:integer:unsigned:default(0),order:integer:unsigned:default(0),excerpt:text:nullable,slug:string:nullable"
命令 make:scaffold 的 --schema 选项中是以逗号分隔的字段名称和设置信息，字段分别如下，对于上面的字段表格
title:string:index
body:text
user_id:integer:unsigned:index
category_id:integer:unsigned:index
reply_count:integer:unsigned:default(0)
view_count:integer:unsigned:default(0)
last_reply_user_id:integer:unsigned:default(0)
order:integer:unsigned:default(0)
excerpt:text:nullable
slug:string:nullable

生成的代码处理了以下事务:
创建话题的数据库迁移文件 —— 2017_09_26_111713_create_topics_table.php；
创建话题数据工厂文件 —— TopicFactory.php；
创建话题数据填充文件 —— TopicsTableSeeder.php；
创建模型基类文件 —— Model.php， 并创建话题数据模型；
创建话题控制器 —— TopicsController.php；
创建表单请求的基类文件 —— Request.php，并创建话题表单请求验证类；
创建话题模型事件监控器 TopicObserver 并在 AppServiceProvider 中注册；
创建授权策略基类文件 —— Policy.php，同时创建话题授权类，并在 AuthServiceProvider 中注册；
在 web.php 中更新路由，新增话题相关的资源路由；
新建符合资源控制器要求的三个话题视图文件，并存放于 resources/views/topics 目录中；
执行了数据库迁移命令 artisan migrate；
因此次操作新建了多个文件，最终执行 composer dump-autoload 来生成 classmap。


debug 扩展包
barryvdh/laravel-debugbar
composer require "barryvdh/laravel-debugbar:~3.1" --dev
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"
'enabled' => env('APP_DEBUG', false),

动态添加class扩展
composer require "hieu-le/active:~3.5"
用法   $condition为true 添加$activeClass 否则添加$inactiveClass
function active_class($condition, $activeClass = 'active', $inactiveClass = '')
提供的condition方法
if_route() - 判断当前对应的路由是否是指定的路由；
if_route_param() - 判断当前的 url 有无指定的路由参数。
if_query() - 判断指定的 GET 变量是否符合设置的值；
if_uri() - 判断当前的 url 是否满足指定的 url；
if_route_pattern() - 判断当前的路由是否包含指定的字符；
if_uri_pattern() - 判断当前的 url 是否含有指定的字符；

HTMLPurifier 本身就是一个独立的项目，运用『白名单机制』对 HTML 文本信息进行 XSS 过滤。
composer require "mews/purifier:~2.0"
php artisan vendor:publish --provider="Mews\Purifier\PurifierServiceProvider"
配置信息
'HTML.Allowed' => 'div,em,a[href|title|style],ul,ol,li,p[style],br',
'CSS.AllowedProperties'    => 'font,font-size,font-weight,font-style,font-family',
当客户端提交
<a someproperty="somevalue" href="http://example.com" style="color:#ccc;font-size:16px">
    文章内容<script>alert('Alerted')</script>
</a>
会被解析为
<a href="http://example.com" style="font-size:16px">
    文章内容
</a>
以下属性未指定会被过滤
someproperty 未指定的 HTML 属性
color 未指定的 CSS 属性
script 未指定的 HTML 标签

Guzzle 库是一套强大的 PHP HTTP 请求套件
composer require "guzzlehttp/guzzle:~6.3"
无需配置，安装完成后即可使用。在顶部 use GuzzleHttp\Client; 引入使用。

composer require "overtrue/pinyin:~3.0"
PinYin 是 安正超 开发的，基于 CC-CEDICT 词典的中文转拼音工具，是一套优质的汉字转拼音解决方案。
无需配置，安装完成后即可使用。在顶部 use use Overtrue\Pinyin\Pinyin;  引入使用。

Redis 驱动
composer require "predis/predis:~1.0"


Horizon 是 Laravel 生态圈里的一员，为 Laravel Redis 队列提供了一个漂亮的仪表板，允许我们很方便地查看和管理 Redis 队列任务执行的情况
安装
composer require "laravel/horizon:~1.0"
发布配置文件
php artisan vendor:publish --provider="Laravel\Horizon\HorizonServiceProvider"
启动监听
php artisan horizon
配置文件分别是 config/horizon.php 和存放在 public/vendor/horizon 文件夹中的 CSS 、JS 等页面资源文件。
至此安装完毕，浏览器打开 http://kouton.test/horizon 访问控制台：
生产环境中
使用 Supervisor 进程工具进行管理，配置和使用请参照 文档 进行配置；
每一次部署代码时，需 artisan horizon:terminate 然后再 artisan horizon 重新加载代码。

快速用户切换工具
安装
composer require "viacreative/sudo-su:~1.1"
添加Provider
app/Providers/AppServiceProvider.php
class AppServiceProvider extends ServiceProvider
{
    ...
    public function register()
    {
        if (app()->isLocal()) {
            $this->app->register(\VIACreative\SudoSu\ServiceProvider::class);
        }
    }
}
发布资源
php artisan vendor:publish --provider="VIACreative\SudoSu\ServiceProvider"
修改配置
config/sudosu.php
// 允许使用的顶级域名
'allowed_tlds' => ['dev', 'local', 'test'],
// 用户模型
'user_model' => App\Models\User::class
模版植入
resources/views/layouts/app.blade.php
...
    @if (app()->isLocal())
        @include('sudosu::user-selector')
    @endif

    <!-- Scripts -->
    <script src="{{ asset('js/app.js') }}"></script>
    @yield('scripts')

</body>
</html>

权限扩展
安装
composer require "spatie/laravel-permission:~2.7"
生成迁移文件
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider" --tag="migrations"
发布配置文件
php artisan migrate
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider" --tag="config"


<table><thead><tr><th>扩展包</th>
<th>一句话描述</th>
<th>本项目应用场景</th>
</tr></thead><tbody><tr><td><a href="https://github.com/laravel/passport">laravel/passport</a></td>
<td>jwt 用户认证包</td>
<td>api 登录认证</td>
</tr><tr><td><a href="https://github.com/Intervention/image">Intervention/image</a></td>
<td>图片处理包</td>
<td>图片上传裁剪</td>
</tr><tr><td><a href="https://github.com/spatie/laravel-permission">laravel-permission:~2.7</a></td>
<td>权限管理包</td>
<td>权限管理</td>
</tr><tr><td><a href="https://github.com/mewebstudio/Purifier">mews/purifier</a></td>
<td>xss过滤</td>
<td>富文本编辑器</td>
</tr><tr><td><a href="https://github.com/overtrue/pinyin">overtrue/pinyin</a></td>
<td>基于 CC-CEDICT 词典的中文转拼音工具</td>
<td>文章 seo 友好的 url</td>
</tr><tr><td><a href="https://github.com/nrk/predis">nrk/predis</a></td>
<td>redis 队列驱动器</td>
<td>队列管理</td>
</tr><tr><td><a href="https://laravel-china.org/docs/laravel/5.5/horizon/1345">laravel/horizon</a></td>
<td>队列监控</td>
<td>队列监控</td>
</tr><tr><td><a href="https://github.com/rap2hpoutre/laravel-log-viewer">rap2hpoutre/laravel-log-viewer</a></td>
<td>laravel 日志查看</td>
<td>查看日志</td>
</tr><tr><td><a href="https://help.aliyun.com/document_detail/32099.html?spm=5176.87240.400427.47.CtLkv4">aliyuncs/oss-sdk-php</a></td>
<td>啊里云 oss</td>
<td>对象存储</td>
</tr><tr><td><a href="https://github.com/overtrue/easy-sms">overtrue/easy-sms</a></td>
<td>短信发送</td>
<td>找回密码</td>
</tr><tr><td><a href="https://github.com/barryvdh/laravel-cors">barryvdh/laravel-cors</a></td>
<td>跨越解决</td>
<td>开发环境方便测试</td>
</tr><tr><td><a href="https://github.com/thephpleague/html-to-markdown">league/html-to-markdown</a></td>
<td>markdown 转 html</td>
<td>富文本编辑器 markdown 支持</td>
</tr><tr><td><a href="https://github.com/Maatwebsite/Laravel-Excel">Maatwebsite/Laravel-Excel</a></td>
<td>excel 处理</td>
<td>导入导出 excel</td>
</tr></tbody></table>


Ubuntu系统使用crontab定时执行python脚本

crontab -e配置完成后，如何把保存并退出？

1.Ctrl+O  写入

2.出现“FIile name to Write...”，输入Enter

3.Ctrl+x 保存输出

提示“crontab:installing new crontab”表示成功。



ALTER TABLE temparticle MODIFY body MEDIUMTEXT NOT NULL comment "正文";
ALTER TABLE temparticle MODIFY reply1 MEDIUMTEXT NOT NULL comment "回复1";
ALTER TABLE temparticle MODIFY reply2 MEDIUMTEXT NOT NULL comment "回复2";
ALTER TABLE temparticle MODIFY reply3 MEDIUMTEXT NOT NULL comment "回复3";
ALTER TABLE temparticle MODIFY reply4 MEDIUMTEXT NOT NULL comment "回复4";
ALTER TABLE temparticle MODIFY reply5 MEDIUMTEXT NOT NULL comment "回复5";
ALTER TABLE temparticle MODIFY reply6 MEDIUMTEXT NOT NULL comment "回复6";

ALTER TABLE topics MODIFY body MEDIUMTEXT NOT NULL comment "正文";

ALTER TABLE replies MODIFY content MEDIUMTEXT NOT NULL comment "回复";

查看字段类型
select column_name,column_comment,data_type from information_schema.columns where table_name='temparticle' and table_schema='ktdb';



PHP部署
旧网站
php 5.2.5
mysql 5.0.45
sudo apt install git vim
 
新 
mysql 5.7.22
php 7.2.5

安装mysql
https://blog.csdn.net/weixx3/article/details/80782479
https://www.cnblogs.com/Jackyye/p/9289275.html

安装 php 7.2
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ondrej/php
sudo apt-get update
sudo apt install php7.2 php7.2-curl php7.2-common php7.2-cli php7.2-mysql php7.2-mbstring php7.2-fpm php7.2-xml php7.2-zip  php7.2-gd -y
sudo apt-get install -y php7.2
 
安装nginx
sudo apt-get install nginx

nignx 指定多个版本的php
https://www.howtoing.com/ubuntu-laravel-php-nginx

设置防火墙 nginx 状态
https://blog.csdn.net/fengfeng0328/article/details/82828224
要停止您的Web服务器，请键入：


$ sudo systemctl stop nginx



要启动你的Web服务器，请输入：


$ sudo systemctl start nginx



要重启你的Web服务器，请输入：


$ sudo systemctl restart nginx



如果您只是简单地进行配置更改，Nginx通常可以重新加载而不会丢失连接。?为此，请输入：


$ sudo systemctl reload nginx



默认情况下，Nginx配置为在服务器引导时自动启动。?如果这不是您想要的，可以通过输入以下命令来禁用此行为：


$ sudo systemctl disable nginx



要重新启用服务以在启动时启动，您可以键入：
$sudo systemctl enable nginx

composer安装
1.下载composer.phar

wget https://getcomposer.org/composer.phar
2.重命名composer.phar为composer

mv composer.phar composer
3.增加可执行权限

chmod +x composer
4.现在可以通过./composer 命令运行composer，但这只仅限于在当前目录运行。要想全局使用，composer ，要设置把它为全局变量。找到composer文件，把它移到/usl/local/bin 目录，这样就可以在全局使用composer 命令。

sudo mv composer /usr/local/bin 


redis
安装命令：
sudo  apt-get install redis-server 

查看tcp 连接

netstat -ap | grep  6379

启动：

服务：redis-server      

客户端： redis-cli

 

修改 配置文件允许局域网内的其他电脑连接redis 

文件位置：/etc/redis/redis.conf   如果无法编辑或者无法保存  请先修改权限

文件上传插件
2 执行php artisan aetherupload:publish来发布一些文件和目录

3 赋予上传目录相应权限，在项目根目录下，执行chmod -R 755 storage/app/aetherupload


生成 supervisor 配置文件
https://blog.csdn.net/win_turn/article/details/60466562
 sudo su - root -c "echo_supervisord_conf > /etc/supervisor/conf.d/horizon.conf"
sudo supervisorctl update

[program:horizon]
process_name=%(program_name)
command=php /var/www/kouton.com/ktweb/artisan horizon
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/www/kouton.com/ktweb/storage/horizon.log

$ sudo crontab -u www-data -l